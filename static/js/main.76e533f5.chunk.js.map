{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","abilities","setAbilities","totalScore","setTotalScore","currentScore","setCurrentScore","checkDropdowns","sum","forEach","obj","getModifier","Math","ceil","pow","score","updateDropdowns","ability","select","document","getElementById","name","toLowerCase","i","length","floor","racial","useEffect","className","Col","xs","FormControl","id","onChange","e","target","value","map","key","InputGroup","Prepend","Text","parseInt","newAbilities","updateScore","selectOptions","push","createDropdownOptions","updateRacial","placeholder","aria-label","aria-describedby","Append","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76e533f5.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport {\n  Col,\n  InputGroup,\n  FormControl,\n} from 'react-bootstrap';\nimport './App.css';\n\nfunction App() {\n  const [abilities,\n    setAbilities] = useState([]);\n  const [totalScore,\n    setTotalScore] = useState([]);\n  \n    const [currentScore,\n      setCurrentScore] = useState([]);\n\n  const createDropdownOptions = () => {\n    let selectOptions = [];\n\n    for (let i = 6; i < 21; i++) {\n      selectOptions.push(\n        <option value={i} key={i}>{i}</option>\n      )\n    }\n    return selectOptions;\n  };\n\n  const updateScore = ability => {\n    let score = parseInt(document.getElementById(ability.toLowerCase() + 'Select').value);\n    abilities.map((obj) => {\n      if(obj.name === ability) {\n        obj.score = score;\n      }\n      return obj\n    })\n    let newAbilities = abilities.map((obj) => {\n      if(obj.name === ability) {\n        obj.score = score;\n      }\n      return obj\n    })\n    setAbilities( newAbilities )\n  }\n\n  const updateRacial = ability => {\n    let racial = parseInt(( document.getElementById(ability.toLowerCase() + 'RacialBonus').value || 0))\n\n    let newAbilities = abilities.map((obj) => {\n      if(obj.name === ability) {\n        obj.racial = racial;\n      }\n      return obj\n    });\n\n    setAbilities( newAbilities )\n  }\n\n  const updateDropdowns = () => {\n    let sum = 0\n    abilities.forEach((obj) => {\n      let mod = getModifier(obj);\n      // mod = mod < 1 ? 1 : mod + 1;\n      // sum += Math.pow(2, mod + 3) + obj.score\n      sum += Math.ceil(Math.pow(obj.score, 2) / 10) + obj.score\n    });\n    setCurrentScore(sum);\n  }\n\n  const checkScore = (name, score) => {\n    let sum = 0;\n    abilities.forEach((obj) => {\n      let mod = getModifier(obj);\n      let abilityScore = obj.score\n      if(obj.name === name){\n        mod = getModifier({\n          name: name,\n          score: score,\n          racial: obj.racial\n        });\n        abilityScore = obj.score;\n      }\n      \n      // mod = mod < 1 ? 1 : mod + 1;\n\n      // sum += Math.pow(2, mod + 3) + abilityScore;\n      sum += abilityScore\n    });\n    console.log('sum: ',sum)\n    if(sum > totalScore) {\n      return false;\n    }\n    return true;\n  }\n\n  const checkDropdowns = () => {\n    updateDropdowns();\n    abilities.forEach((ability) => {\n      let select = document.getElementById(ability.name.toLowerCase() + 'Select');\n      for(let i = ability.score - 6; i < select.length; i++) {\n        // let check = checkScore(ability.name, i + 6);\n        // console.log('check ', check)\n        // if(!checkScore(ability.name, i + 6)) {\n        //   select[i].disabled = true;\n        // } else {\n        //   select[i].disabled = false;\n        // }\n        \n      }\n    });\n  }\n\n\n  const getModifier = ability => {\n    return -5 + Math.floor((ability.score + (ability.racial || 0)) / 2) \n  }\n\n  useEffect(() => {\n    setAbilities([\n      {\n        name: 'STRENGTH',\n        score: 6\n      }, {\n        name: 'DEXTERITY',\n        score: 6\n      }, {\n        name: 'CONSTITUTION',\n        score: 6\n      }, {\n        name: 'INTELLIGENCE',\n        score: 6\n      }, {\n        name: 'WISDOM',\n        score: 6\n      }, {\n        name: 'CHARISMA',\n        score: 6\n      }\n    ]);\n    setTotalScore(200);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Col xs={6}>\n       <FormControl\n                id=\"totalScore\"\n                onChange={\n                    function(e) {\n                      setTotalScore(e.target.value)\n                  }\n                }\n                value={totalScore}\n                />\n        {/* <input id=\"totalScore\" type=\"text\" className=\"form-control\" value={addressLine1} onChange={this.setAddressLine1} maxLength=\"30\"/> */}\n        {/* <input value={totalScore} type=\"text\"/> */}\n        <p>{currentScore}</p>\n      </Col>\n      <Col xs={12}>\n        {abilities.map((ability, i) => (\n          <div key={i}>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"basic-addon1\">{ability.name}</InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <select\n                className='custom-select'\n                id={ability.name.toLowerCase() + 'Select'}\n                onChange={ \n                  function() {\n                    updateScore(ability.name);\n                    checkDropdowns();\n                  }\n                }\n                >\n                {createDropdownOptions()}\n              </select>\n              <FormControl\n                id={ability.name.toLowerCase() + 'RacialBonus'}\n                onChange={\n                    function() {\n                      updateRacial(ability.name);\n                      checkDropdowns();\n                  }\n                }\n                placeholder=\"Racial Bonus\"\n                aria-label=\"Racial Bonus\"\n                aria-describedby=\"basic-addon1\"/>\n              <InputGroup.Append>\n                <InputGroup.Text>{ability.score + (ability.racial || '')}</InputGroup.Text>\n              </InputGroup.Append>\n              <InputGroup.Append>\n                <InputGroup.Text>{\n                  getModifier(ability)\n                  }\n                </InputGroup.Text>\n              </InputGroup.Append>\n            </InputGroup>\n          </div>\n        ))}\n\n      </Col>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}